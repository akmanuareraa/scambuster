// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import { useState, useEffect } from "react";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
//import "../sass/circularprogressbars.scss";
import { useNavigate, useSearchParams } from "react-router-dom";
//import { useMoralis, useMoralisFile} from "react-moralis";

//import InputField from './InputField';

//import { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';
//import { Chart, ArcElement } from "chart.js";
import abi from "../contract/validator.js";
import protonabi from "../contract/proton.js";
import { Doughnut } from "react-chartjs-2";

var ABI = JSON.parse(abi);
var protonABI = JSON.parse(protonabi);


function HomeSearcher_(props) {

  const [siteData, setsiteData] = useState({ site: [] });

  //const siteData = props.siteData;

  const [protonData, setprotonData] = useState({ balance: 0, circulation: 0 });


  
const [websiteData, setwebsiteData] = useState({
    website: ""
  });


const handleChange = (name) => {
    return (event) => {
      if (name === "website") {
        setwebsiteData((prevState) => {
          return {
            ...prevState,
            linkpreview: {
              ...prevState.linkpreview,
              status: false,
            },
          };
        });
        try {
          let host = new URL(event.target.value).hostname;
          console.log("Valid URL ", event.target.value, host);
          //getLinkPreview(event.target.value);
        } catch (error) {
          console.log("Invalid URL", event.target.value);
        }
      }
      setwebsiteData((prevState) => {
        return {
          ...prevState,
          [name]: event.target.value,
        };
      });
    };
  };


  const search = () => {
    
    const server = "localhost:7171";

    let app = this;
    var backendurl = "https://" + server + "/getSiteStatus";

    let params = JSON.stringify({
      url: websiteData.website
    });

    console.log(params,"params");

    fetch(backendurl, {
      method: "POST",
      mode: "cors",

      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
      },
      
      body: params,

    })
      .then(function (response, error) {
        if (response) {
          return response.json();
        } else {
          console.log(error);
        }
      })
      .then(function (data) {
        
        console.log("data",data);
        setwebsiteData((prevState) => {
            return {
              ...prevState,
              status: data.status
            };
          });

      });
  };

  





  return (
    <div>
      <div className="columns">
        <div className="column"></div>
      </div>
      <div className="columns">
        <div className="column"></div>
      </div>
      <div className="columns">
        <div className="column"></div>
      </div>
      <div className="columns">
        <div className="column"></div>
      </div>
      <div className="columns">
        <div className="column"></div>
      </div>
      <div className="columns">
        <div className="column"></div>
      </div>
      <div className="box">
        <div className="columns is-centered">
          <div className="column has-text-centered  is-5">
            <div className="column is-full">
              <nav className="panel is-light">
                <p class="panel-heading is-centered">Search if a website is a scam</p>
                {
                    websiteData.status?
                    <div className="panel-block ">

                     {
                            websiteData.status == "TRUE"?
                            
                            <div className="column has-text-centered">
                            Website is a scam!
                            </div>:
                            websiteData.status == "FALSE"?
                            <div className="column has-text-centered">
                            Website is a clean
                            </div>:           
                            websiteData.status == "VOTING IN PROGRESS"?
                            <div className="column has-text-centered">
                            Validators are currently voting on this site
                            </div>:
                            websiteData.status == "NO VOTES REGISTERED"?
                            <div className="column has-text-centered">
                            Validators are currently voting on this site
                            </div>:     
                            <div className="column has-text-centered">
                            Site has not been reported
                            </div>                       

                     }   
                    </div>:

                <div class="panel-block ">
                <div className="column">    
                <p>Please enter the website name below. Enter only the domain name.</p><br></br>
                
                <input
                                      value={websiteData.website}
                                      className="input"
                                      type="website"
                                      placeholder="Eg. polygun.techno.u"
                                      onChange={handleChange("website")}
                                    />
                                    <br></br><br></br>
                
                                  <a
                                    className="button is-success"
                                    onClick={() =>
                                      search()
                                    }
                                  >
                                    <FontAwesomeIcon icon="fa-brands fa-searchengin" /> &nbsp;&nbsp;  
                                    Search
                                  </a>
                </div>                    
                    
                </div>     
                }   
              </nav>
            </div>
          </div>

        </div>
        <div className="columns">
  <div className="column"></div>   
  </div>
  <div className="columns">
  <div className="column"></div>
  </div>
  <div className="columns">
  <div className="column"></div>   
  </div>
  <div className="columns">
  <div className="column"></div>
  </div>
  <div className="columns">
  <div className="column"></div>   
  </div>
  <div className="columns">
  <div className="column"></div>
  </div>
  <div className="columns">
  <div className="column"></div>   
  </div>
  <div className="columns">
  <div className="column"></div>   
  </div>
  <div className="columns">
  <div className="column"></div>
  </div>
  <div className="columns">
  <div className="column"></div>   
  </div>
  <div className="columns">
  <div className="column"></div>   
  </div>
  <div className="columns">
  <div className="column"></div>   
  </div>
  
      </div>
      
    </div>
  );
}

const HomeSearcher = React.forwardRef(HomeSearcher_);

export default HomeSearcher;
