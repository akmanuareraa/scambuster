// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import { useState, useEffect } from "react";
import { create } from "ipfs-http-client";
import axios from "axios";
import { validatorabi } from "../../ABI/validatorABI";
import { protonabi } from "../../ABI/protonabi";
import Web3 from "web3";
import { useERC20Transfers } from "react-moralis";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
//import "../sass/circularprogressbars.scss";
import { useNavigate } from "react-router-dom";
//import { useMoralis, useMoralisFile} from "react-moralis";

//import InputField from './InputField';

//import { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';
import { Chart, ArcElement } from "chart.js";

import { Doughnut } from "react-chartjs-2";
Chart.register(ArcElement);

function HomeProposer_(props) {
  const { fetchERC20Transfers, data, error, isLoading, isFetching } =
    useERC20Transfers();
  const [pageState, setpageState] = useState({ one: "on" });

  let yesVotes = 60;
  let noVotes = 30;
  let notvoted = 100 - (noVotes + yesVotes);
  let invites = 5;
  let proton = 1;
  //   const dataChart = {
  //     labels: ["Scam", "Clean", "Not Voted"],
  //     datasets: [
  //       {
  //         label: "# of Votes",
  //         data: [noVotes, yesVotes, notvoted],
  //         backgroundColor: [
  //           "rgba(255, 20, 10, 100)",
  //           "rgba(32, 153, 32, 0.84)",
  //           "rgba(239, 243, 239, 0.84)",
  //         ],
  //         borderColor: [
  //           "rgba(255, 20, 10, 100)",
  //           "rgba(32, 153, 32, 0.84)",
  //           "rgba(239, 243, 239, 0.84)",
  //         ],
  //         borderWidth: 1,
  //       },
  //     ],
  //   };

  useEffect(() => {
    console.log("someerror", error);
  }, [error]);

  const ERC20Transfers = () => {
    let pastDate = new Date().setMonth(new Date().getMonth() - 24);
    console.log("Func called with ", pastDate);
    fetchERC20Transfers({
      params: {
        chain: "0x13881",
        address: "0x46880A842561Fe468eC07705c68DD0E7ef201a61",
        from_block: 0,
        // to_date: "20200401",
      },
    }).then(function (response, error) {
      if (response) {
        console.log("Transactions ", response);
        console.log("Txns Data", data);
        let totalTxns = response.total;
        let oldTxnObj = response.result[totalTxns - 1];
        let oldTimestamp = new Date(oldTxnObj.block_timestamp).valueOf();
        console.log("dates", oldTimestamp, pastDate);
        if (oldTimestamp < pastDate) {
          console.log("Eligible for Airdrop");
          // mintToken()
        } else {
          alert("Not Eligible for Airdrop");
        }
      } else {
        console.log(error);
      }
    });
  };

  const [websiteData, setwebsiteData] = useState({
    website: "",
    comment1: "",
    comment2: "",
    comment3: "",
    confirmation: false,
    submission: false,
    protonBalance: 0,
    protonSupply: 0,
    mintProcess: false,
    linkpreview: {
      status: false,
    },
  });

  useEffect(() => {
    if (props.appState.web3) {
      getTokenData();
    }
  }, []);

  useEffect(() => {
    if (props.appState.web3) {
      getTokenData();
    }
  }, [props.appState.web3]);

  const getTokenData = () => {
    var ABI = JSON.parse(protonabi);
    var contract = new props.appState.web3.eth.Contract(
      ABI,
      "0xf6BcDe6Bb9a6E6762669980091AD0853D3Ad9dB6"
    );
    contract.methods
      .balanceOf(props.appState.account)
      .call({ from: props.appState.account })
      .then(function (response, error) {
        if (response) {
          console.log("balance of " + response);
          if(response >= 1){
            setwebsiteData((prevState) => {
              return {
                ...prevState,
                //protonBalance: Web3.utils.fromWei(response.toString()),
                protonBalance: response,
                overBalance: true
              };
            });
          }
          setwebsiteData((prevState) => {
            return {
              ...prevState,
              //protonBalance: Web3.utils.fromWei(response.toString()),
              protonBalance: response,
            };
          });
          contract.methods
            .totalSupply()
            .call({ from: props.appState.account })
            .then(function (response, error) {
              if (response) {
                console.log("totalSupply", response);
                setwebsiteData((prevState) => {
                  return {
                    ...prevState,
                    // protonSupply: Web3.utils.fromWei(response.toString()),
                    protonSupply: response,
                  };
                });
              } else {
                console.log("err", error);
              }
            });
        } else {
          console.log("err", error);
        }
      });
  };

  const sendInvite = () => {
    invites = invites - 1;
  };

  const handleChange = (name) => {
    return (event) => {
      if (name === "website") {
        setwebsiteData((prevState) => {
          return {
            ...prevState,
            linkpreview: {
              ...prevState.linkpreview,
              status: false,
            },
          };
        });
        try {
          let host = new URL(event.target.value).hostname;
          console.log("Valid URL ", event.target.value, host);
          //getLinkPreview(event.target.value);
        } catch (error) {
          console.log("Invalid URL", event.target.value);
        }
      }
      setwebsiteData((prevState) => {
        return {
          ...prevState,
          [name]: event.target.value,
        };
      });
    };
  };

  const getLinkPreview = async () => {
    // let base64img = await captureWebsite.base64(url)
    // setwebsiteData((prevState) => {
    //     return {
    //         ...prevState,
    //         linkpreview: {
    //             ...prevState.linkpreview,
    //             img: base64img
    //         }
    //     }
    // })
    axios
      .post("https://localhost:7171/getpreview", { url: websiteData.website })
      .then(function (response, error) {
        if (response) {
          console.log("linkpreview", response.data.Status);
          if (response.data.Status !== "Error") {
            setwebsiteData((prevState) => {
              return {
                ...prevState,
                linkpreview: {
                  ...prevState.linkpreview,
                  status: true,
                  img: Buffer.from(response.data.Status[0].data).toString(
                    "base64"
                  ),
                },
              };
            });
          } else {
            setwebsiteData((prevState) => {
              return {
                ...prevState,
                linkpreview: {
                  ...prevState.linkpreview,
                  status: "error",
                },
              };
            });
          }
        } else {
          console.log(error);
        }
      });
  };

  const onChangeHandler = (event) => {
    console.log(event.target.files[0]);
    setwebsiteData((prevState) => {
      return {
        ...prevState,
        file: event.target.files[0],
        fileName: event.target.files[0].name,
      };
    });
  };

  const changeState = (flag) => {
    setpageState((prevState) => {
      return {
        ...prevState,
        one: flag,
      };
    });
  };

  const confirmSubmission = async () => {
    console.log("websiteData", websiteData);
    let ipfsUrl;
    const client = create("https://ipfswrite.mecasso.live/api/v0/add");
    const added = await client.add(websiteData.file);
    ipfsUrl = "https://ipfs.mecasso.live/ipfs/" + added.path;
    console.log("ipfsUrl", ipfsUrl);

    var ABI = JSON.parse(validatorabi);
    var contract = new props.appState.web3.eth.Contract(
      ABI,
      "0x1026628c3Ad736cc8FF09066724CF69e7a166F95"
    );
    // var ipfsURL =
    //   "https://ipfs.mecasso.live/ipfs/" + encodeURIComponent(app.state.ipfsID);
    // console.log("ipfs URL", ipfsURL, app.state.ipfsID);
    contract.methods
      .addSite(
        websiteData.website,
        websiteData.comment1 +
          "@_$_^" +
          websiteData.comment2 +
          "@_$_^" +
          websiteData.comment3 +
          "@_$_^",
          ipfsUrl
      )
      .send({ from: props.appState.account })
      .then(function (response, error) {
        if (response) {
          console.log("response", response);
          setwebsiteData((prevState) => {
            return {
              ...prevState,
              submission: true,
            };
          });
        } else {
          console.log("error", error);
        }
      });
  };

  const isValidUrl = (url) => {
    try {
      let host = new URL(url).host;
      console.log("host", host);
      return true;
    } catch (error) {
      return false;
    }
  };

  const submitEvaluation = async () => {
    if (websiteData.website.length > 0) {
      if (isValidUrl(websiteData.website)) {
        if (
          websiteData.comment1.length > 0 &&
          websiteData.comment2.length > 0 &&
          websiteData.comment3.length > 0 &&
          websiteData.fileName.length > 0
        ) {
          getLinkPreview();
          setwebsiteData((prevState) => {
            return {
              ...prevState,
              confirmation: true,
            };
          });
        } else {
          alert("Please fill all the fields");
        }
      } else {
        alert("Please provide a valid URL");
      }
    } else {
      alert("Please provide a valid URL");
    }
  };

  const mintToken = async () => {
    console.log("account", props.appState.account);
    setwebsiteData((prevState) => {
      return {
        ...prevState,
        mintProcess: true,
      };
    });
    axios
      .post("https://localhost:7171/mint", { address: props.appState.account })
      .then(function (response, error) {
        if (response) {
          console.log("mintresponse", response.data);
          setwebsiteData((prevState) => {
            return {
              ...prevState,
              mintProcess: false,
            };
          });
          alert("1 PTON credited to Account: " + props.appState.account);
          getTokenData();
        } else {
          console.log(error);
        }
      });
  };

  //   const checkContract = () => {
  //     var ABI = JSON.parse(validatorabi);
  //     var contract = new props.appState.web3.eth.Contract(
  //       ABI,
  //       "0x37e9A220Dd1833C36a9063901662E0dDbA031f6F"
  //     );
  //     contract.methods
  //       .sitelist("fakecrypto.com")
  //       .call({ from: props.appState.account })
  //       .then(function (response, error) {
  //         if (response) {
  //           console.log("response from validator contract", response);
  //         } else {
  //           console.log("error", error);
  //         }
  //       });
  //   };

  return (
    <div>
      {/* <button
        onClick={() => {
          ERC20Transfers();
        }}
      >
        Check Contract
      </button> */}
      <div className="columns">
        <div className="column"></div>
      </div>
      <div className="columns">
        <div className="column"></div>
      </div>

      <div className="box">
        <div className="columns">
          <div className="column has-text-centered is-offset-1 is-5">
            <div className="column is-full is-centered grey-box">
              {!props.appState.web3 ? (
                <div>
                  <p className="title is-3">Please Connect Your Wallet</p>
                  <img
                    src="/images/metamask.svg"
                    style={({ height: "300px" }, { width: "300px" })}
                  ></img>
                </div>
              ) : (
                <div>
                  <nav className="panel is-light">
                    {websiteData.submission ? (
                      <div>
                        <p className="title is-2">Successfully Submitted</p>
                        <img src="/images/success.gif"></img>
                      </div>
                    ) : (
                      <div>
                        {websiteData.confirmation ? (
                          <div>
                            <p class="panel-heading is-centered">
                              <p className="title is-2">
                                Confirmation Submission
                              </p>
                            </p>
                            {websiteData.linkpreview.status === true ? (
                              <div className="mt-5">
                                {/* <p>Link Preview will be shown here</p> */}
                                <img
                                  src={
                                    "data:image/png;base64," +
                                    websiteData.linkpreview.img
                                  }
                                  style={{
                                    borderRadius: "2%",
                                    width: "450px",
                                    height: "300px",
                                  }}
                                ></img>
                              </div>
                            ) : websiteData.linkpreview.status === "error" ? (
                              <p className="subtitle is-5 mt-5">Invalid Link</p>
                            ) : (
                              <div className="mt-4">
                                <img
                                  src="/images/loading.gif"
                                  style={{ height: "50px", width: "50px" }}
                                ></img>
                              </div>
                            )}
                            <label className="label is-family-secondary">
                              <p className="title is-3 mt-3">
                                {websiteData.website.length > 35 ? (
                                  <div className="tag is-dark">
                                    {websiteData.website.slice(0, 15) + "..."}
                                  </div>
                                ) : (
                                  <div className="tag is-dark is-large">
                                    {websiteData.website}
                                  </div>
                                )}
                              </p>
                            </label>
                            <label className="label is-family-secondary">
                              <p className="title is-3 mt-5">Comments</p>
                            </label>
                            <div>
                              <div class="tag is-light is-medium mt-3">
                                {websiteData.comment1}
                              </div>
                            </div>
                            <div>
                              <div class="tag is-light is-medium mt-3">
                                {websiteData.comment2}
                              </div>
                            </div>
                            <div>
                              <div class="tag is-light  is-medium mt-3">
                                {websiteData.comment3}
                              </div>
                            </div>
                            <div>
                              {websiteData.linkpreview.status === true ? (
                                <button
                                  disabled={false}
                                  className="button is-success mt-5"
                                  onClick={() => confirmSubmission()}
                                >
                                  Confirm Submission
                                </button>
                              ) : websiteData.linkpreview.status === "error" ? (
                                <button
                                  disabled={true}
                                  className="button is-success mt-5"
                                  onClick={() => confirmSubmission()}
                                >
                                  Confirm Submission
                                </button>
                              ) : (
                                <button
                                  disabled={true}
                                  className="button is-success mt-5"
                                  onClick={() => confirmSubmission()}
                                >
                                  Confirm Submission
                                </button>
                              )}
                            </div>
                            <div>
                              <button
                                className="button is-dark mt-3 mb-3"
                                onClick={() => {
                                  console.log("state", websiteData);
                                  setwebsiteData((prevState) => {
                                    return {
                                      ...prevState,
                                      confirmation: false,
                                    };
                                  });
                                }}
                              >
                                Back
                              </button>
                            </div>
                          </div>
                        ) : (
                          <div>
                            <p class="panel-heading is-centered">
                              <p className="title is-2">
                                <b>Report a Scam Website</b>
                              </p>
                            </p>

                            <div class="panel-block ">
                              <br></br>
                              <br></br>
                              <div className="column is-8 is-offset-2 has-text-centered">
                                <label className="label is-family-secondary">
                                  <p className="title is-4">
                                    Website Home Page Link
                                  </p>
                                </label>
                                <div className="control">
                                  <div className="columns mt-1">
                                    <input
                                      value={websiteData.website}
                                      className="input"
                                      type="website"
                                      placeholder="polygun.techno.u"
                                      onChange={handleChange("website")}
                                    />
                                    {/* <button
                                      className="button is-success ml-3"
                                      onClick={() => getLinkPreview()}
                                    >
                                      Show Preview
                                    </button> */}
                                  </div>
                                </div>

                                <br></br>

                                <label className="label is-family-secondary mt-3 mb-3">
                                  <p className="title is-4">
                                    Why do you think this is a scam?
                                  </p>
                                </label>
                                <div className="control">
                                  <input
                                    value={websiteData.comment1}
                                    className="input"
                                    type="text"
                                    placeholder="1. Comment 1"
                                    onChange={handleChange("comment1")}
                                  />
                                </div>
                                <br></br>
                                <div className="control">
                                  <input
                                    value={websiteData.comment2}
                                    className="input"
                                    type="text"
                                    placeholder="2. Comment 2"
                                    onChange={handleChange("comment2")}
                                  />
                                </div>
                                <br></br>
                                <div className="control">
                                  <input
                                    value={websiteData.comment3}
                                    className="input"
                                    type="text"
                                    placeholder="3. Comment 4"
                                    onChange={handleChange("comment3")}
                                  />
                                </div>
                                <br></br>

                                <label className="label is-family-secondary">
                                  <p className="title is-4 mt-3">
                                    Upload Screenshots (.jpg/.gif)
                                  </p>
                                </label>
                                {/* <div className="columns is-centered"></div> */}
                                <div className="column has-text-centered is-offset-3">
                                  <div className="file is-boxed has-name ml-4">
                                    <label className="file-label">
                                      <input
                                        className="file-input"
                                        type="file"
                                        name="screenshot"
                                        onChange={onChangeHandler}
                                      />
                                      <span className="file-cta">
                                        <span className="file-icon">
                                          <i className="fa fa-upload"></i>
                                        </span>
                                        <span className="file-label">
                                          <b>Select File</b>
                                        </span>
                                      </span>
                                      <br></br>
                                      {/* &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */}
                                      {websiteData.fileName}
                                      <br></br>
                                    </label>
                                  </div>
                                </div>
                                <a
                                  className="button is-success mt-2"
                                  onClick={() => {
                                    if(websiteData.protonBalance < 1){
                                      alert("Proton Coin Balance Too Low. Please mint some Coins")
                                    }else{
                                      submitEvaluation();
                                    }
                                    
                                    // console.log("Submitted");
                                  }}
                                >
                                  Submit for evaluation
                                </a>
                              </div>
                            </div>
                          </div>
                        )}
                      </div>
                    )}
                  </nav>
                </div>
              )}
            </div>
          </div>

          <div className="column has-text-centered is-5 ">
            <div className="column grey-box">
              <nav className="panel is-light">
                <p class="panel-heading is-centered">
                  <p className="title is-2">
                    <b>Proton Coin Balance</b>
                  </p>
                </p>
                <br></br>
                <h1 className="title is-3">{websiteData.protonBalance} PTON</h1>
                <p className="title is-6 mb-1">
                  Total Circulation : {websiteData.protonSupply} PTON
                </p>
                <br></br>
                <br></br>
                <a
                  className="button is-success"
                  disabled={websiteData.mintProcess || websiteData.overBalance}
                  onClick={() => {
                    if (props.appState.web3) {
                      ERC20Transfers();
                    } else {
                      alert("Please connect your Wallet");
                    }
                  }}
                >
                  Request PTON Airdrop
                </a>
                <br></br>
                <br></br>
              </nav>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

const HomeProposer = React.forwardRef(HomeProposer_);

export default HomeProposer;
